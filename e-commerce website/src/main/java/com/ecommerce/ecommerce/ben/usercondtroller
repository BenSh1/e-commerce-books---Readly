

    /*
    public RegistrationController(UserService userService) {
        this.userService = userService;
    }
     */

/*
    @PostMapping("/editCustomer/{id}")
    public String updateCustomer(Model model , @PathVariable Long id,
                                 @ModelAttribute User theUser,
                                 RedirectAttributes redirectAttributes,
                                @RequestParam String role) {

        System.out.println("=======================role================ : " + role);

        userService.update(id, theUser, role);
        redirectAttributes.addFlashAttribute("message", "user updated successfully!");

        return "redirect:/customersList";
    }

 */

    /*
        edit with the same role of the member of the site.
     */




/*
    @PostMapping("/editCustomer/{id}")
    public String updateCustomer2(@Valid @ModelAttribute("user") User user,
                                  BindingResult theBindingResult,
                                  @PathVariable Long id,
                                  Model model,
                                  RedirectAttributes redirectAttributes) {

        System.out.println("==================in updateCustomer2 ===========");

        if (theBindingResult.hasErrors()) {
            System.out.println("==================in hasErrors ===========");
            model.addAttribute("user", user);
            //return "editCustomerForm"; // Replace with your form view name
            return "redirect:/editCustomer/" + id;
        }

        userService.update(id, user);
        redirectAttributes.addFlashAttribute("updateMessage", "The User has been updated successfully!");
        return "redirect:/editCustomer/" + id;
    }

 */



/*
    @InitBinder
    public void initBinder(WebDataBinder dataBinder) {

        StringTrimmerEditor stringTrimmerEditor = new StringTrimmerEditor(true);

        dataBinder.registerCustomEditor(String.class, stringTrimmerEditor);
    }

 */

/*
    @PostMapping("/editCustomer/{id}")
    public String updateCustomer2(Model model , @PathVariable Long id,
                                 RedirectAttributes redirectAttributes,
                                @Valid @ModelAttribute("user") User user,
                                BindingResult theBindingResult) {

        System.out.println("==================in editCustomer ===========");

        // Handle form data
        String userName = user.getUserName();
        logger.info("Processing EDIT form for: " + userName);

        User tempUser = userService.getUser(id);
        logger.info("Processing EDIT form for: " + tempUser.getUserName());


        // form validation
        if (theBindingResult.hasErrors()){
            System.out.println("==================in hasErrors ===========");
            User currentUser = userService.getUser(id);
            model.addAttribute("user", currentUser);
            //return "redirect:/home";
            return "redirect:/editCustomer/" + id;
        }

        //userService.update(id, theUser);
        User currentUser = userService.getUser(id);
        userService.update(id, user);

        redirectAttributes.addFlashAttribute("updateMessage", "The User has been updated successfully!");

        //return "redirect:/editCustomer";
        return "redirect:/editCustomer/" + id;

    }

 */





/*
    @GetMapping("/forgetPassword")
    public String getForgotPassword() {

        return "user/forgetPassword";
    }

 */
/*
    @PostMapping("/forgotPassword")
    public String processForgotPassword(Model model, String email) {
        // Find user by email
        User user = userService.findUserByEmail(email);

        if (user == null) {
            model.addAttribute("error", "No account found with that email.");
            return "forgotPassword";
        }

        // Generate reset token
        String token = UUID.randomUUID().toString();
        userService.createPasswordResetTokenForUser(user, token);

        // Create the email
        SimpleMailMessage mailMessage = new SimpleMailMessage();
        mailMessage.setTo(user.getEmail());
        mailMessage.setSubject("Password Reset Request");
        mailMessage.setText("To reset your password, click the link below:\n"
                + "http://localhost:8080/resetPassword?token=" + token);

        // Send the email
        mailSender.send(mailMessage);

        model.addAttribute("message", "Password reset link sent to your email.");
        return "user/forgotPassword";
    }

 */









